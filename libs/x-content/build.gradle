/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'elasticsearch.build'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-scm'

archivesBaseName = 'elasticsearch-x-content'

publishing {
    publications {
        nebula {
            artifactId = archivesBaseName
        }
    }
}

dependencies {
    compile "com.strapdata.elasticsearch:elasticsearch-core:${version}"

    compile "org.yaml:snakeyaml:${versions.snakeyaml}"
    compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"

    compile("com.strapdata.cassandra:cassandra-all:${versions.cassandra}") {
        exclude group:'net.java.dev.jna', module:'jna'
        exclude group:'org.ow2.asm', module:'asm'
        exclude group:'org.apache.commons', module:'commons-lang3'
        exclude group:'org.slf4j', module:'slf4j-api'
        exclude group:'org.yaml', module:'snakeyaml'
        exclude group:'io.netty', module:'netty-all'
        exclude group:'joda-time', module:'joda-time'
        exclude group:'commons-codec', module:'commons-codec'
    }

    testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"

    testCompile(project(":test:framework")) {
        exclude group: 'com.strapdata.elasticsearch', module: 'elasticsearch-x-content'
    }
    
    compile("com.strapdata.cassandra:cassandra-all:${versions.cassandra}") {
        exclude group:'net.java.dev.jna', module:'jna'
        exclude group:'org.ow2.asm', module:'asm'
        exclude group:'org.apache.commons', module:'commons-lang3'
        exclude group:'org.slf4j', module:'slf4j-api'
        exclude group:'org.yaml', module:'snakeyaml'
        exclude group:'io.netty', module:'netty-all'
        exclude group:'joda-time', module:'joda-time'
        exclude group:'commons-codec', module:'commons-codec'
    }

}

forbiddenApisMain {
    // x-content does not depend on server
    // TODO: Need to decide how we want to handle for forbidden signatures with the changes to core
    replaceSignatureFiles 'jdk-signatures'
}

thirdPartyAudit.ignoreMissingClasses (
    // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)
    'com.fasterxml.jackson.databind.ObjectMapper',
)

dependencyLicenses {
  mapping from: /jackson-.*/, to: 'jackson'
}

jarHell.enabled = false
