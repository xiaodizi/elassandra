/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 */


import org.elasticsearch.gradle.LoggedExec
import org.elasticsearch.gradle.MavenFilteringHack

import java.nio.file.Files
import java.nio.file.Path
import java.util.regex.Matcher
import java.util.regex.Pattern

/*****************************************************************************
 *                         Deb and rpm configuration                         *
 *****************************************************************************
 *
 * The general strategy here is to build a directory on disk that contains
 * stuff that needs to be copied into the distributions. This is
 * important for two reasons:
 * 1. ospackage wants to copy the directory permissions that it sees off of the
 *    filesystem. If you ask it to create a directory that doesn't already
 *    exist on disk it petulantly creates it with 0755 permissions, no matter
 *    how hard you try to convince it otherwise.
 * 2. Convincing ospackage to pick up an empty directory as part of a set of
 *    directories on disk is reasonably easy. Convincing it to just create an
 *    empty directory requires more wits than I have.
 * 3. ospackage really wants to suck up some of the debian control scripts
 *    directly from the filesystem. It doesn't want to process them through
 *    MavenFilteringHack or any other copy-style action.
 *
 * The following commands are useful when it comes to check the user/group
 * and files permissions set within the RPM and DEB packages:
 *
 *    rpm -qlp --dump path/to/elasticsearch.rpm
 *    dpkg -c path/to/elasticsearch.deb
 */



void addProcessFilesTask(String type, boolean oss) {
  String packagingFiles = "build/packaging/${type}"

  task("process${type.capitalize()}Files", type: Copy) {
    into packagingFiles

    with copySpec {
      from 'src/common'
      from "src/${type}"
      MavenFilteringHack.filter(it, expansionsForDistribution(type, oss))
    }

    into('pylib') {
      with pylibFiles(type, oss)
    }

    into('etc/cassandra') {
      with configFiles(type, oss)
    }
    MavenFilteringHack.filter(it, expansionsForDistribution(type, oss))

    doLast {
      // create empty dirs, we set the permissions when configuring the packages
      mkdir "${packagingFiles}/var/run/cassandra"
      mkdir "${packagingFiles}/var/log/cassandra"
      mkdir "${packagingFiles}/var/lib/cassandra"
      mkdir "${packagingFiles}/usr/share/cassandra/plugins"

      // bare empty dir for /etc/cassandra
      mkdir "${packagingFiles}/etc/cassandra"
      mkdir "${packagingFiles}/etc/cassandra/scripts"

        mkdir "${packagingFiles}/pylib"
    }
  }
}
addProcessFilesTask('deb', true)
addProcessFilesTask('rpm', true)

// Common configuration that is package dependent. This can't go in ospackage
// since we have different templated files that need to be consumed, but the structure
// is the same
Closure commonPackageConfig(String type, boolean oss) {
  return {
    dependsOn "process${type.capitalize()}Files"
    packageName "elassandra"
    // Follow elasticsearch's file naming convention
    archiveName "${packageName}-${project.version}.${type}"

    String prefix = "${type}"
    destinationDir = file("${prefix}/build/distributions")
    String packagingFiles = "build/packaging/${prefix}"

    String scripts = "${packagingFiles}/scripts"
    preInstall file("${scripts}/preinst")
    postInstall file("${scripts}/postinst")
    preUninstall file("${scripts}/prerm")
    postUninstall file("${scripts}/postrm")
    if (type == 'rpm') {
      postTrans file("${scripts}/posttrans")
    }

    requires('coreutils')

    // top level "into" directive is not inherited from ospackage for some reason, so we must
    // specify it again explicitly for copying common files
    into('/usr/bin') {
      with binFiles(type, oss)
      exclude 'cassandra.in.sh'
      exclude 'cassandra'
      exclude 'aliases.sh'
    }
    into('/usr/share/cassandra') {
      from(rootProject.projectDir) {
        include 'README.md'
        fileMode 0644
      }
      into('lib') {
          with libFiles(oss)
      }
      into('lib/licenses') {
        dirMode 0755
        with cassandraLicenseFiles(type, oss)
        with licenseFiles(type, oss)
      }
      into('modules') {
        with modulesFiles(oss)
      }
      into('lib/sigar-bin') {
        with copySpec {
          with sigarFiles(type, oss)
          exclude '*.dll'
        }
      }
      into('pylib') {
        with pylibFiles(type, oss)
      }
      into('tools') {
        with copySpec {
          with toolsFiles(type, oss)
          with stressFiles(type, oss)
          exclude 'bin/*.bat'
          exclude 'bin/*.exe'
          exclude 'bin/*.ps1'
        }
      }
      // we need to specify every intermediate directory in these paths so the package managers know they are explicitly
      // intended to manage them; otherwise they may be left behind on uninstallation. duplicate calls of the same
      // directory are fine
      eachFile { FileCopyDetails fcp ->
        String[] segments = fcp.relativePath.segments
        for (int i = segments.length - 2; i > 2; --i) {
          directory('/' + segments[0..i].join('/'), 0755)
          if (segments[-2] == 'bin') {
            fcp.mode = 0755
          } else {
            fcp.mode = 0644
          }
        }
      }
    }

    // license files
    if (type == 'deb') {
      into("/usr/share/doc/${packageName}") {
        from "${packagingFiles}/copyright"
        fileMode 0644
      }
    } else {
      assert type == 'rpm'
      into('/usr/share/cassandra') {
        from(rootProject.file('licenses')) {
          include 'APACHE-LICENSE-2.0.txt'
          rename { 'LICENSE.txt' }
        }
        fileMode 0644
      }
    }

    // ========= config files =========
    configurationFile '/etc/cassandra/cassandra-env.sh'
    configurationFile '/etc/cassandra/cassandra-jaas.config'
    configurationFile '/etc/cassandra/cassandra-rackdc.properties'
    configurationFile '/etc/cassandra/cassandra-topology.properties'
    configurationFile '/etc/cassandra/cassandra.yaml'
    configurationFile '/etc/cassandra/commitlog_archiving.properties'
    configurationFile '/etc/cassandra/cqlshrc.sample'
    configurationFile '/etc/cassandra/elasticsearch.yml'
    configurationFile '/etc/cassandra/jvm.options'
    configurationFile '/etc/cassandra/logback-tools.xml'
    configurationFile '/etc/cassandra/logback.xml'
    configurationFile '/etc/cassandra/metrics-reporter-config-sample.yaml'
    configurationFile '/etc/cassandra/README.txt'

    into('/usr/bin') {
      with cassandraBinFiles(type, oss)
      with binFiles(type, oss)
      fileMode 0755
      user 'root'
      permissionGroup 'root'
      exclude '*.bat'
      exclude '*.exe'
      exclude '*.ps1'
      exclude 'aliases.sh'
      exclude 'cassandra.in.sh'
    }
    into('/usr/share/cassandra') {
      with homebinFiles(type, oss)
      fileMode 0755
      user 'root'
      permissionGroup 'root'
    }

    from("${packagingFiles}") {
     dirMode 02750
     into('/etc')
     permissionGroup 'cassandra'
     includeEmptyDirs true
     createDirectoryEntry true
     include("cassandra") // empty dir, just to add directory entry
   }
   from("${packagingFiles}/etc/cassandra") {
     into('/etc/cassandra')
      dirMode 02750
      fileMode 0660
      permissionGroup 'cassandra'
      includeEmptyDirs true
      createDirectoryEntry true
      fileType CONFIG | NOREPLACE
    }
    String envFile = expansionsForDistribution(type, false)['path.env']
    configurationFile envFile
    into(new File(envFile).getParent()) {
      fileType CONFIG | NOREPLACE
      permissionGroup 'cassandra'
      fileMode 0660
      from "${packagingFiles}/env/cassandra"
    }

    // ========= systemd =========
    configurationFile '/usr/lib/systemd/system/cassandra.service'
    into('/usr/lib/tmpfiles.d') {
      from "${packagingFiles}/systemd/cassandra.conf"
      fileMode 0644
    }
    into('/usr/lib/systemd/system') {
      fileType CONFIG | NOREPLACE
      from "${packagingFiles}/systemd/cassandra.service"
      fileMode 0644
    }
    into('/usr/lib/sysctl.d') {
      fileType CONFIG | NOREPLACE
      from "${packagingFiles}/systemd/sysctl/cassandra.conf"
      fileMode 0644
    }

    // ========= sysV init =========
    configurationFile '/etc/init.d/cassandra'
    into('/etc/init.d') {
      fileMode 0750
      fileType CONFIG | NOREPLACE
      from "${packagingFiles}/init.d/cassandra"
    }

    // ========= empty dirs =========
    // NOTE: these are created under packagingFiles as empty, but the permissions are set here
    Closure copyEmptyDir = { path, u, g, mode ->
      File file = new File(path)
      into(file.parent) {
        from "${packagingFiles}/${file.parent}"
        include file.name
        includeEmptyDirs true
        createDirectoryEntry true
        user u
        permissionGroup g
        dirMode mode
      }
    }
    copyEmptyDir('/var/run/cassandra', 'cassandra', 'cassandra', 0755)
    copyEmptyDir('/var/log/cassandra', 'cassandra', 'cassandra', 02750)
    copyEmptyDir('/var/lib/cassandra', 'cassandra', 'cassandra', 02750)
    copyEmptyDir('/usr/share/cassandra/plugins', 'root', 'root', 0755)

    // the oss package conflicts with the default distribution and vice versa
    conflicts('cassandra')
  }
}

apply plugin: 'nebula.ospackage-base'

// this is package indepdendent configuration
ospackage {
  maintainer 'Strapdata Team <support@strapdata.com>'
  summary '''
    Elassandra is a multi-master distributed database and search engine from strapdata.com.
    Reference documentation can be found at https://doc.elassandra.io and
    commercial support is available form https://www.strapdata.com
    '''.stripIndent().replace('\n', ' ').trim()
  url 'https://www.strapdata.com/'

  // signing setup
  if (project.hasProperty('signing.password') && System.getProperty('build.snapshot', 'true') == 'false') {
    signingKeyId = project.hasProperty('signing.keyId') ? project.property('signing.keyId') : 'C58CE2B6'
    signingKeyPassphrase = project.property('signing.password')
    signingKeyRingFile = project.hasProperty('signing.secretKeyRingFile') ?
            project.file(project.property('signing.secretKeyRingFile')) :
            new File(new File(System.getProperty('user.home'), '.gnupg'), 'secring.gpg')
  }

  requires('coreutils')

  fileMode 0644
  dirMode 0755
  user 'root'
  permissionGroup 'root'

  into '/usr/share/cassandra'
  with noticeFile
}

Closure commonDebConfig() {
  return {
    configure(commonPackageConfig('deb', true))

    customFields['License'] = 'ASL-2.0'

    version = project.version
    packageGroup 'web'
    requires 'bash'
    requires 'libc6'
    requires 'adduser'

    requires('python', '2.7', GREATER | EQUAL)
    requires('openjdk-8-jre-headless').or("java8-runtime")
    recommends('ntp')
    conflicts('cassandra')

    into('/usr/share/lintian/overrides') {
      from('src/deb/lintian/cassandra')
    }

    into('/usr/lib/python2.7/dist-packages') {
      from "build/packaging/pylib/usr/lib/python2.7/dist-packages"
      fileMode 0664
    }
    directory("/usr/lib/python2.7/dist-packages/cqlshlib", 0755)
  }
}

task buildDeb(type: Deb) {
  dependsOn setupPylibDeb
  configure(commonDebConfig())
}

Closure commonRpmConfig() {
  return {
    configure(commonPackageConfig('rpm', true))

    license 'ASL 2.0'

    packageGroup 'Application/Internet'
    requires '/bin/bash'
    requires('python', '2.7', GREATER | EQUAL)
    requires('jre', "1.8.0", GREATER | EQUAL)
    recommends('ntp')
    conflicts('cassandra')

    prefix '/usr'
    packager 'Elassandra'
    version = project.version.replace('-', '_')
    release = '1'
    arch 'NOARCH'
    os 'LINUX'
    distribution 'Elassandra'
    vendor 'Strapdata'
    // TODO ospackage doesn't support icon but we used to have one

    // without this the rpm will have parent dirs of any files we copy in, eg /etc/elasticsearch
    addParentDirs false
  }
}

task buildRpm(type: Rpm) {
  dependsOn setupPylibRpm
  configure(commonRpmConfig())
}

Closure dpkgExists = { it -> new File('/bin/dpkg-deb').exists() || new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }
Closure rpmExists = { it -> new File('/bin/rpm').exists() || new File('/usr/bin/rpm').exists() || new File('/usr/local/bin/rpm').exists() }

Closure debFilter = { f -> f.name.endsWith('.deb') }

// This configures the default artifact for the distribution specific
// subprojects. We have subprojects because Gradle project substitutions
// can only bind to the default configuration of a project
subprojects {
  apply plugin: 'distribution'

  String buildTask = "build${it.name.replaceAll(/-[a-z]/) { it.substring(1).toUpperCase() }.capitalize()}"
  ext.buildDist = parent.tasks.getByName(buildTask)
  artifacts {
    'default' buildDist
  }

  // sanity checks if packages can be extracted
  final File extractionDir = new File(buildDir, 'extracted')
  File packageExtractionDir
  if (project.name.contains('deb')) {
    packageExtractionDir = new File(extractionDir, 'deb-extracted')
  } else {
    assert project.name.contains('rpm')
    packageExtractionDir = new File(extractionDir, 'rpm-extracted')
  }
  task checkExtraction(type: LoggedExec) {
    dependsOn buildDist
    doFirst {
      project.delete(extractionDir)
      extractionDir.mkdirs()
    }
  }
  check.dependsOn checkExtraction
  if (project.name.contains('deb')) {
    checkExtraction {
      onlyIf dpkgExists
      commandLine 'dpkg-deb', '-x', "${-> buildDist.outputs.files.filter(debFilter).singleFile}", packageExtractionDir
    }
  } else {
    assert project.name.contains('rpm')
    checkExtraction {
      onlyIf rpmExists
      final File rpmDatabase = new File(extractionDir, 'rpm-database')
      commandLine 'rpm',
          '--badreloc',
          '--nodeps',
          '--noscripts',
          '--notriggers',
          '--dbpath',
          rpmDatabase,
          '--relocate',
          "/=${packageExtractionDir}",
          '-i',
          "${-> buildDist.outputs.files.singleFile}"
    }
  }

  task checkLicense {
    dependsOn buildDist, checkExtraction
  }
  check.dependsOn checkLicense
  if (project.name.contains('deb')) {
    checkLicense {
      onlyIf dpkgExists
      doLast {
        Path copyrightPath
        String expectedLicense
        String licenseFilename
        copyrightPath = packageExtractionDir.toPath().resolve("usr/share/doc/elassandra/copyright")
        expectedLicense = "ASL-2.0"
        licenseFilename = "APACHE-LICENSE-2.0.txt"
        final List<String> header = Arrays.asList("Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/",
                "Copyright: Strapdata SAS <contact@strapdata.com>",
                "License: " + expectedLicense)
        final List<String> licenseLines = Files.readAllLines(rootDir.toPath().resolve("licenses/" + licenseFilename))
        final List<String> expectedLines = header + licenseLines.collect { " " + it }
        assertLinesInFile(copyrightPath, expectedLines)
      }
    }
  } else {
    assert project.name.contains('rpm')
    checkLicense {
      onlyIf rpmExists
      doLast {
        String licenseFilename
        licenseFilename = "APACHE-LICENSE-2.0.txt"
        final List<String> licenseLines = Files.readAllLines(rootDir.toPath().resolve("licenses/" + licenseFilename))
        final Path licensePath = packageExtractionDir.toPath().resolve("usr/share/cassandra/LICENSE.txt")
        assertLinesInFile(licensePath, licenseLines)
      }
    }
  }

  task checkNotice {
    dependsOn buildDist, checkExtraction
    onlyIf { (project.name.contains('deb') && dpkgExists.call(it)) || (project.name.contains('rpm') && rpmExists.call(it)) }
    doLast {
      final List<String> noticeLines = Arrays.asList("Strapdata", "Copyright 2017-2019 Strapdata")
      final Path noticePath = packageExtractionDir.toPath().resolve("usr/share/cassandra/NOTICE.txt")
      assertLinesInFile(noticePath, noticeLines)
    }
  }
  check.dependsOn checkNotice

  task checkLicenseMetadata(type: LoggedExec) {
    dependsOn buildDist, checkExtraction
  }
  check.dependsOn checkLicenseMetadata
  if (project.name.contains('deb')) {
    checkLicenseMetadata { LoggedExec exec ->
      onlyIf dpkgExists
      final ByteArrayOutputStream output = new ByteArrayOutputStream()
      exec.commandLine 'dpkg-deb', '--info', "${ -> buildDist.outputs.files.filter(debFilter).singleFile}"
      exec.standardOutput = output
      doLast {
        String expectedLicense
        expectedLicense = "ASL-2.0"
        final Pattern pattern = Pattern.compile("\\s*License: (.+)")
        final String info = output.toString('UTF-8')
        final String[] actualLines = info.split("\n")
        int count = 0
        for (final String actualLine : actualLines) {
          final Matcher matcher = pattern.matcher(actualLine)
          if (matcher.matches()) {
            count++
            final String actualLicense = matcher.group(1)
            if (expectedLicense != actualLicense) {
              throw new GradleException("expected license [${expectedLicense} for package info but found [${actualLicense}]")
            }
          }
        }
        if (count == 0) {
          throw new GradleException("expected license [${expectedLicense}] for package info but found none in:\n${info}")
        }
        if (count > 1) {
          throw new GradleException("expected a single license for package info but found [${count}] in:\n${info}")
        }
      }
    }
  } else {
    assert project.name.contains('rpm')
    checkLicenseMetadata { LoggedExec exec ->
      onlyIf rpmExists
      final ByteArrayOutputStream output = new ByteArrayOutputStream()
      exec.commandLine 'rpm', '-qp', '--queryformat', '%{License}', "${-> buildDist.outputs.files.singleFile}"
      exec.standardOutput = output
      doLast {
        String license = output.toString('UTF-8')
        String expectedLicense
        expectedLicense = "ASL 2.0"
        if (license != expectedLicense) {
          throw new GradleException("expected license [${expectedLicense}] for [${-> buildDist.outputs.files.singleFile}] but was [${license}]")
        }
      }
    }
  }

}
