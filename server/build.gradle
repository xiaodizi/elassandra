/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.carrotsearch.gradle.junit4.RandomizedTestingTask
import org.elasticsearch.gradle.BuildPlugin

apply plugin: 'elasticsearch.build'
apply plugin: 'nebula.optional-base'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-scm'

publishing {
  publications {
    nebula {
      artifactId 'elasticsearch'
    }
  }
}

archivesBaseName = 'elasticsearch'

// we want to keep the JDKs in our IDEs set to JDK 8 until minimum JDK is bumped to 9 so we do not include this source set in our IDEs
if (!isEclipse && !isIdea) {
  sourceSets {
    java9 {
      java {
        srcDirs = ['src/main/java9']
      }
    }
  }
  
  configurations {
    java9Compile.extendsFrom(compile)
  }
  
  dependencies {
    java9Compile sourceSets.main.output
  }

  compileJava9Java {
    sourceCompatibility = 9
    targetCompatibility = 9
  }

  forbiddenApisJava9 {
    if (project.runtimeJavaVersion < JavaVersion.VERSION_1_9) {
      targetCompatibility = JavaVersion.VERSION_1_9.getMajorVersion()
    }
  }

  jar {
    metaInf {
      into 'versions/9'
      from sourceSets.java9.output
    }
    manifest.attributes('Multi-Release': 'true')
  }
}

dependencies {

  compile "com.strapdata.elasticsearch:elasticsearch-core:${version}"
  compile "com.strapdata.elasticsearch:elasticsearch-secure-sm:${version}"
  compile "com.strapdata.elasticsearch:elasticsearch-x-content:${version}"

  compileOnly project(':libs:plugin-classloader')
  testRuntime project(':libs:plugin-classloader')

  // lucene
  compile "org.apache.lucene:lucene-core:${versions.lucene}"
  compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}"
  compile "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
  compile "org.apache.lucene:lucene-grouping:${versions.lucene}"
  compile "org.apache.lucene:lucene-highlighter:${versions.lucene}"
  compile "org.apache.lucene:lucene-join:${versions.lucene}"
  compile "org.apache.lucene:lucene-memory:${versions.lucene}"
  compile "org.apache.lucene:lucene-misc:${versions.lucene}"
  compile "org.apache.lucene:lucene-queries:${versions.lucene}"
  compile "org.apache.lucene:lucene-queryparser:${versions.lucene}"
  compile "org.apache.lucene:lucene-sandbox:${versions.lucene}"
  compile "org.apache.lucene:lucene-spatial:${versions.lucene}"
  compile "org.apache.lucene:lucene-spatial-extras:${versions.lucene}"
  compile "org.apache.lucene:lucene-spatial3d:${versions.lucene}"
  compile "org.apache.lucene:lucene-suggest:${versions.lucene}"

  // utilities
  compile "com.strapdata.elasticsearch:elasticsearch-cli:${version}"
  compile 'com.carrotsearch:hppc:0.7.1'

  // time handling, remove with java 8 time
  compile "joda-time:joda-time:${versions.joda}"

  // json and yaml
  compile "org.yaml:snakeyaml:${versions.snakeyaml}"
  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
  compile "org.codehaus.jackson:jackson-core-asl:1.9.13"
  compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"

  // percentiles aggregation
  compile 'com.tdunning:t-digest:3.2'
  // precentil ranks aggregation
  compile 'org.hdrhistogram:HdrHistogram:2.1.9'

  // lucene spatial
  compile "org.locationtech.spatial4j:spatial4j:${versions.spatial4j}", optional
  compile "org.locationtech.jts:jts-core:${versions.jts}", optional

  // logging
  compile "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  compile "org.apache.logging.log4j:log4j-core:${versions.log4j}", optional
  // to bridge dependencies that are still on Log4j 1 to Log4j 2
  //compile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}", optional

  // repackaged jna with native bits linked against all elastic supported platforms
  compile "org.elasticsearch:jna:${versions.jna}"

  if (!isEclipse && !isIdea) {
    java9Compile sourceSets.main.output
  }

  testCompile(project(":test:framework")) {
    // tests use the locally compiled version of server
    exclude group: 'com.strapdata.elasticsearch', module: 'elasticsearch'
  }

  testCompile 'com.google.jimfs:jimfs:1.1'
  compile 'com.google.guava:guava:19.0'
  
  // Elassandra add-ons
  runtime("com.strapdata.cassandra:cassandra-all:${versions.cassandra}") {
    exclude group:'net.java.dev.jna', module:'jna'
    exclude group:'org.ow2.asm', module:'asm'
    exclude group:'org.apache.commons', module:'commons-lang3'
    exclude group:'org.slf4j', module:'slf4j-api'
    exclude group:'org.yaml', module:'snakeyaml' 
    exclude group:'io.netty', module:'netty-all' 
    exclude group:'joda-time', module:'joda-time' 
    exclude group:'commons-codec', module:'commons-codec' 
  }

  compile group: 'org.antlr', name: 'antlr', version: '3.5.2'
  compile group: 'org.antlr', name: 'antlr-runtime', version: '3.5.2'
  compile group: 'com.boundary', name: 'high-scale-lib', version: '1.0.6'
  compile group: 'com.github.jbellis', name: 'jamm', version: '0.3.0'

  // See CASSANDRA-11193 Missing binary dependencies for running Cassandra in embedded mode
  //compile("org.ow2.asm:asm-debug-all:5.1")

  // Usually when gradle detect a version conflict, it takes the newest version.
  // Unfortunately this mechanism doesn't work with deps in elasticsearch modules.
  // When gradle is collecting the jars to be packaged within a module, it excludes any jar that
  // is already included in the core library folder, with the exactly same version number.
  // This way, if a version conflict occurs between core and a module, the jar will be shipped in the module,
  // resulting in a jar hell at runtime. The solution here is to explicitly declare these conflicting deps
  // at the top-level, with same version numbers as in the modules.
  compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  compile "commons-codec:commons-codec:${versions.commonscodec}"
  compile "commons-logging:commons-logging:${versions.commonslogging}"
  compile "org.apache.commons:commons-lang3:3.4"

  testCompileOnly("io.dropwizard.metrics:metrics-core:3.1.0") {
    exclude group:'org.slf4j', module:'slf4j-api'
  }

  // Elasticsearch require netty 4.1
  // https://github.com/netty/netty/issues/6855
  compile "io.netty:netty-all:4.1.32.Final"

  // https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/_using_another_logger.html
  compile "org.slf4j:slf4j-api:${versions.slf4j}", optional
  compile "org.apache.logging.log4j:log4j-to-slf4j:${versions.log4j}"       // log4j2 to slf4j to logback (for prod)
  compile "ch.qos.logback:logback-classic:1.1.8"
  compile "ch.qos.logback:logback-core:1.1.8"

  // slf4j to log4j2 (for ES testing only)
  /*
  testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}") {
    exclude group: 'org.slf4j', module: 'slf4j-api'
  }
  */

  compile "org.javassist:javassist:3.20.0-GA"
  compile 'net.sf.jopt-simple:jopt-simple:5.0.2'
}

compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"
compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

task testScriptDocValuesMissingV7Behaviour(type: RandomizedTestingTask) {
  include '**/ScriptDocValuesMissingV7BehaviourTests.class'
  systemProperty 'es.scripting.exception_for_missing_value', 'true'
  classpath = tasks.test.classpath
  testClassesDirs = tasks.test.testClassesDirs
}
check.dependsOn(testScriptDocValuesMissingV7Behaviour)

unitTest {
  // these are tested explicitly in separate test tasks
  exclude '**/*ScriptDocValuesMissingV7BehaviourTests.class'
  exclude '**/TransportShardBulkActionTests.class'
  exclude '**/SnapshotTests.class'
  exclude '**/CreateSnapshotRequestTests.class'
  exclude '**/SnapshotStatusTests,.class'
  exclude 'org/elasticsearch/repositories/**'
  exclude 'org/elasticsearch/snapshots/**'
  exclude 'org/elasticsearch/action/admin/cluster/reroute/**'
  exclude 'org/elasticsearch/action/admin/indices/shrink/**'
  exclude 'org/elasticsearch/action/support/master/**'
  exclude 'org/elasticsearch/cluster/routing/allocation/decider/**'
  exclude '**/ReplicationOperationTests.class'
  exclude '**/DelayedAllocationServiceTests.class'
  exclude '**/PrimaryTermsTests.class'
  exclude '**/ClusterStateTests.class'
  exclude '**/CombinedDeletionPolicyTests.class'
  exclude '**/IndexMetaDataUpdater.class'
  exclude '**/IndexShardRetentionLeaseTests.class'
  exclude '**/BulkPrimaryExecutionContextTests.class'
  exclude '**/RemoveCorruptedShardDataCommandTests.class'
  exclude '**/ShardGetServiceTests.class'
  exclude '**/LoggersTests.class'
  exclude '**/TransportLoggerTests.class'
  exclude '**/JodaCompatibleZonedDateTimeTests.class'
  exclude '**/UnassignedInfoTests.class'
  exclude '**/ESPolicyTests.class'
  exclude '**/ReadOnlyEngineTests.class'
  exclude '**/GatewayMetaStateTests.class'
  exclude '**/SearchServiceTests.class'   // TODO fix
  exclude '**/GeoShapeQueryTests.class'   // TODO fix
  exclude '**/InternalEngineTests.class'
  exclude '**/GetTermVectorsTests.class'  // TODO fix
  jvmArg '-Djava.locale.providers=COMPAT'

}

forbiddenPatterns {
  exclude '**/*.json'
  exclude '**/*.jmx'
  exclude '**/*.dic'
  exclude '**/*.binary'
  exclude '**/*.st'
}

testingConventions {
  naming.clear()
  naming {
    Tests {
      baseClass "org.apache.lucene.util.LuceneTestCase"
    }
    IT {
      baseClass "org.elasticsearch.test.ESIntegTestCase"
      baseClass "org.elasticsearch.test.ESSingleNodeTestCase"
    }
  }
}

task generateModulesList {
  List<String> modules = project(':modules').subprojects.collect { it.name }
  modules.add('x-pack')
  File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
  processResources.from(modulesFile)
  inputs.property('modules', modules)
  outputs.file(modulesFile)
  doLast {
    modulesFile.parentFile.mkdirs()
    modulesFile.setText(modules.join('\n'), 'UTF-8')
  }
}

task generatePluginsList {
  Set<String> plugins = new TreeSet<>(project(':plugins').childProjects.keySet())
  plugins.remove('example')

  File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
  processResources.from(pluginsFile)
  inputs.property('plugins', plugins)
  outputs.file(pluginsFile)
  doLast {
    pluginsFile.parentFile.mkdirs()
    pluginsFile.setText(plugins.join('\n'), 'UTF-8')
  }
}

processResources {
  dependsOn generateModulesList, generatePluginsList
}

thirdPartyAudit.ignoreMissingClasses (
  // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)
  'com.fasterxml.jackson.databind.ObjectMapper',

  // from log4j
  'com.conversantmedia.util.concurrent.DisruptorBlockingQueue',
  'com.conversantmedia.util.concurrent.SpinPolicy',
  'com.fasterxml.jackson.annotation.JsonInclude$Include',
  'com.fasterxml.jackson.databind.DeserializationContext',
  'com.fasterxml.jackson.databind.DeserializationFeature',
  'com.fasterxml.jackson.databind.JsonMappingException',
  'com.fasterxml.jackson.databind.JsonNode',
  'com.fasterxml.jackson.databind.Module$SetupContext',
  'com.fasterxml.jackson.databind.ObjectReader',
  'com.fasterxml.jackson.databind.ObjectWriter',
  'com.fasterxml.jackson.databind.SerializerProvider',
  'com.fasterxml.jackson.databind.deser.std.StdDeserializer',
  'com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer',
  'com.fasterxml.jackson.databind.module.SimpleModule',
  'com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter',
  'com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider',
  'com.fasterxml.jackson.databind.ser.std.StdScalarSerializer',
  'com.fasterxml.jackson.databind.ser.std.StdSerializer',
  'com.fasterxml.jackson.dataformat.xml.JacksonXmlModule',
  'com.fasterxml.jackson.dataformat.xml.XmlMapper',
  'com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter',
  'com.fasterxml.jackson.databind.node.ObjectNode',
  'org.fusesource.jansi.Ansi',
  'org.fusesource.jansi.AnsiRenderer$Code',
  'com.lmax.disruptor.BlockingWaitStrategy',
  'com.lmax.disruptor.BusySpinWaitStrategy',
  'com.lmax.disruptor.EventFactory',
  'com.lmax.disruptor.EventTranslator',
  'com.lmax.disruptor.EventTranslatorTwoArg',
  'com.lmax.disruptor.EventTranslatorVararg',
  'com.lmax.disruptor.ExceptionHandler',
  'com.lmax.disruptor.LifecycleAware',
  'com.lmax.disruptor.RingBuffer',
  'com.lmax.disruptor.Sequence',
  'com.lmax.disruptor.SequenceReportingEventHandler',
  'com.lmax.disruptor.SleepingWaitStrategy',
  'com.lmax.disruptor.TimeoutBlockingWaitStrategy',
  'com.lmax.disruptor.WaitStrategy',
  'com.lmax.disruptor.YieldingWaitStrategy',
  'com.lmax.disruptor.dsl.Disruptor',
  'com.lmax.disruptor.dsl.ProducerType',
  'javax.jms.Connection',
  'javax.jms.ConnectionFactory',
  'javax.jms.Destination',
  'javax.jms.JMSException',
  'javax.jms.MapMessage',
  'javax.jms.Message',
  'javax.jms.MessageConsumer',
  'javax.jms.MessageProducer',
  'javax.jms.Session',
  'javax.mail.Authenticator',
  'javax.mail.Message$RecipientType',
  'javax.mail.PasswordAuthentication',
  'javax.mail.Session',
  'javax.mail.Transport',
  'javax.mail.internet.InternetAddress',
  'javax.mail.internet.InternetHeaders',
  'javax.mail.internet.MimeBodyPart',
  'javax.mail.internet.MimeMessage',
  'javax.mail.internet.MimeMultipart',
  'javax.mail.internet.MimeUtility',
  'javax.mail.util.ByteArrayDataSource',
  'org.apache.commons.compress.compressors.CompressorStreamFactory',
  'org.apache.commons.compress.utils.IOUtils',
  'org.apache.commons.csv.CSVFormat',
  'org.apache.commons.csv.QuoteMode',
  'org.apache.kafka.clients.producer.Callback',
  'org.apache.kafka.clients.producer.KafkaProducer',
  'org.apache.kafka.clients.producer.Producer',
  'org.apache.kafka.clients.producer.ProducerRecord',
  'org.apache.kafka.clients.producer.RecordMetadata',
  'org.codehaus.stax2.XMLStreamWriter2',
  'org.jctools.queues.MessagePassingQueue$Consumer',
  'org.jctools.queues.MpscArrayQueue',
  'org.osgi.framework.AdaptPermission',
  'org.osgi.framework.AdminPermission',
  'org.osgi.framework.Bundle',
  'org.osgi.framework.BundleActivator',
  'org.osgi.framework.BundleContext',
  'org.osgi.framework.BundleEvent',
  'org.osgi.framework.BundleReference',
  'org.osgi.framework.FrameworkUtil',
  'org.osgi.framework.ServiceRegistration',
  'org.osgi.framework.SynchronousBundleListener',
  'org.osgi.framework.wiring.BundleWire',
  'org.osgi.framework.wiring.BundleWiring',
  'org.zeromq.ZMQ$Context',
  'org.zeromq.ZMQ$Socket',
  'org.zeromq.ZMQ',

  // from org.locationtech.spatial4j.io.GeoJSONReader (spatial4j)
  'org.noggit.JSONParser',

  // from lucene-spatial
  'com.fasterxml.jackson.databind.JsonSerializer',
  'com.fasterxml.jackson.databind.JsonDeserializer',
  'com.fasterxml.jackson.databind.node.ArrayNode',
  'com.google.common.geometry.S2Cell',
  'com.google.common.geometry.S2CellId',
  'com.google.common.geometry.S2Projections',
  'com.google.common.geometry.S2Point',
  'com.google.common.geometry.S2$Metric',
  'com.google.common.geometry.S2LatLng'
)

if (project.runtimeJavaVersion > JavaVersion.VERSION_1_8) {
  thirdPartyAudit.ignoreMissingClasses 'javax.xml.bind.DatatypeConverter'
}

dependencyLicenses {
  mapping from: /lucene-.*/, to: 'lucene'
  dependencies = project.configurations.runtime.fileCollection {
    it.group.startsWith('com.strapdata.elasticsearch') == false ||
            // keep the following org.elasticsearch jars in
            (it.name == 'jna' ||
             it.name == 'securesm' ||
             it.name == 'cassandra')
  }
}

if (isEclipse == false || project.path == ":server-tests") {
  task integTest(type: RandomizedTestingTask,
                 group: JavaBasePlugin.VERIFICATION_GROUP,
                 description: 'Multi-node tests',
                 dependsOn: unitTest.dependsOn) {
    include '**/*IT.class'
  }
  check.dependsOn integTest
  integTest.mustRunAfter test
  task internalClusterTest {
     dependsOn integTest    
  }
}

// TODO: remove these compatibility tests in 7.0
task testScriptedMetricAggParamsV6Compatibility(type: RandomizedTestingTask) {
  include '**/ScriptedMetricAggregatorAggStateV6CompatTests.class'
  include '**/InternalScriptedMetricAggStateV6CompatTests.class'
  systemProperty 'es.aggregations.enable_scripted_metric_agg_param', 'true'
  classpath = tasks.test.classpath
  testClassesDirs = tasks.test.testClassesDirs
}
check.dependsOn(testScriptedMetricAggParamsV6Compatibility)

unitTest {
  // these are tested explicitly in separate test tasks
  exclude '**/ScriptedMetricAggregatorAggStateV6CompatTests.class'
  exclude '**/InternalScriptedMetricAggStateV6CompatTests.class'
}
